package Chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The GUI class of the server window which also contains Server class and ClientThread class to run
 * the server of the chat.
 * @author Eli Eliyahu 312328016 Noam Gruber 312325384
 */
public class ServerFrame extends javax.swing.JFrame {

    final int SERVER_PORT = 18524;//Which port the server listening to
    Server myServer;
    //Make sure same port is specified in the ClientFrame file

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Calls the functions that handles starting and stopping the server.
     *
     * @param evt This parameter isn't used.
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        startStopServer();
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    /**
     * Initializing a new thread with server class or completely terminating an
     * existing one.
     */
    private void startStopServer() {
        if (btnStart.getText().equals("Start")) {
            btnStart.setText("Stop");
            myServer = new Server();
            new Thread(myServer).start();
        } else {
            btnStart.setText("Start");
            if (myServer != null) {
                myServer.stopServer();
            }
        }
    }

    /**
     * Server class manages the server socket and is the core of the chat. It's
     * a thread because it should listen to new connection while simultaneously
     * managing the chat with the already connected clients. An object of this
     * type is initialized every time the admin starts the server from
     * startStopServer method. Has methods to manage all the clients it is
     * connected to. While all the clients use this those methods from their
     * thread the server class Constantly listening to the the server socket in
     * the run method and adds clients to a list which contains references to
     * the threads of each connected client.
     */
    public class Server implements Runnable {

        //Hold the references to all the clients as threads
        private final ArrayList<ClientThread> connectedClients;
        //All the clients connect to this server socket
        private ServerSocket serverSocket;

        /**
         * Initializing the list of the clients.
         */
        public Server() {
            connectedClients = new ArrayList<>();
        }

        /**
         * Terminating the server completely. Appends a message to the server
         * log about closing server, Sending a message to all the connected
         * clients. Traversing the clients' list and terminating each one of
         * them.
         */
        public void stopServer() {
            txtLog.append("Closed server socket.\n");
            sendMessageAllClient("<Server disconnected>");
            closeAllClients();
            connectedClients.clear();
            try {
                serverSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        /**
         * Traversing the clients' list and terminating each using the method
         * closeConnection of class ClientThread.
         */
        private void closeAllClients() {
            synchronized (connectedClients) {
                for (ClientThread current : connectedClients) {
                    current.closeConnection();
                }
            }
        }

        /**
         * Gets the name a new client wants to use and returns if the name is
         * legal. This method checks that the name isn't 'all' because this
         * string is used when the user wants to send the message to all the
         * clients. Also if the name is already used by another client the
         * method will return false.
         *
         * @param name The name a new client wants to use.
         * @return Returns true if the name is legal else false.
         */
        public boolean isLegalName(String name) {
            synchronized (connectedClients) {
                if (name.equals("all")) {
                    return false;
                }
                for (ClientThread current : connectedClients) {
                    if (current.info.name.equals(name)) {
                        return false;
                    }
                }
                return true;
            }
        }

        /**
         * Sending a message to the output stream of each client.
         *
         * @param msg The message that is needed to be sent to all the connected
         * clients.
         */
        public void sendMessageAllClient(String msg) {
            synchronized (connectedClients) {
                for (ClientThread current : connectedClients) {
                    current.out.println(msg);
                }
            }
        }

        /**
         * Is called from a ClientThread instances (by some client) to send a
         * private message to another client. If there is no a client with the
         * corresponding name or the sender name is identical to the recipient
         * the message won't be sent. Otherwise the message will be sent. One
         * way or another the sender will be notified accordingly.
         *
         * @param senderName The name of the client that is sending the message.
         * @param recipientName The name of the client that the sender wants the
         * message to get to.
         * @param msg The message that the sender sends.
         * @return Returns true if the message sent to the desired recipient.
         */
        public synchronized boolean sendPrivateMsg(String senderName, String recipientName, String msg) {
            if (senderName.equals(recipientName)) {
                return false;
            }
            ClientThread recipient = getClientThread(recipientName);
            if (recipient == null) {
                return false;
            }
            recipient.out.println("<Private message from: " + senderName + "> " + msg);
            return true;
        }

        /**
         * Returns a client with the name that passed in the parameter.
         *
         * @param clientsName The name of the client it's ClientThread instance
         * is wanted.
         * @return Returns the reference to the ClientThread instance
         * corresponding to the client.
         */
        private ClientThread getClientThread(String clientsName) {
            synchronized (connectedClients) {
                for (ClientThread current : connectedClients) {
                    if (current.info.name.equals(clientsName)) {
                        return current;
                    }
                }
                return null;
            }
        }

        /**
         * Starts a new server socket and listening to its until some client wants to connect.
         * When the server is in running state this method initializes
         * a ClientThread class and passes the socket if the client to it.
         */
        @Override
        public void run() {
            try {
                //Start listening to connections at the specified port number
                serverSocket = new ServerSocket(SERVER_PORT);
                txtLog.append("Chat server is up and running and listening on port " + SERVER_PORT + ".\n");
                while (true) {
                    Socket clientSocket = serverSocket.accept();
                    //Some client connected. start a new thread only for this client
                    if (btnStart.getText().equals("Stop")) {
                        ClientThread clientThread = new ClientThread(clientSocket);
                        clientThread.start();
                    } else {
                        return;
                    }
                }
            } catch (IOException e) {
                if (btnStart.getText().equals("Stop")) {
                    txtLog.setText("Error has been occured while starting the server. \n\tError: " + e.toString() + "\n");
                    btnStart.setText("Start");
                }
            }
        }

          /**
         * For JUnit. Gets the name a new client wants to use and returns if the name is
         * legal. This method checks that the name isn't 'all' because this
         * string is used when the user wants to send the message to all the
         * clients. Also if the name is already used by another client the
         * method will return false.
         *
         * @param name The name a new client wants to use.
         * @param connectedClients list of connected clients.
         * @return Returns true if the name is legal else false.
         */
        public boolean isLegalName(String name, ArrayList<ClientThread> connectedClients) {
            synchronized (connectedClients) {
                if (name.equals("all")) {
                    return false;
                }
                for (ClientThread current : connectedClients) {
                    if (current.info.name.equals(name)) {
                        return false;
                    }
                }
                return true;
            }
        }
        
        /**
         * This class represents the connection between each client with the
         * sever. It's a thread so the clients could read and write data the
         */
        public class ClientThread extends Thread {
            /**
             * The socket which is the connection between the server and the client
             */
            public Socket curClient; 
            /**
             * Stream to write data to the client
             */
            public PrintWriter out; //
            /**
             * Stream to read data from the client
             */
            public BufferedReader in; 
            /**
             * The class that will be restored from a string which is the serialized.
             * same class containing all the needed data from the client
             */
            ClientInfoSeirialized info;
            /**
             * The constructor. Initializes info object that will be
             * deserialized containing all the data from the client
             *
             * @param curClient The socket that connects the server with the
             * particular client gets it after the accept method
             */
            public ClientThread(Socket curClient) {
                this.curClient = curClient;
                info = new ClientInfoSeirialized();
            }
            /**
             * Constructor with a name parameter for JUnit
             * @param curClient The socket that connects the server with the
             * particular client gets it after the accept method
             * @param name The name of the client
             */
             public ClientThread(Socket curClient, String name) {
                this.curClient = curClient;
                info = new ClientInfoSeirialized();
                info.name = name;
            }

            /**
             * Here the server listens to messages from the client (as serialized
             * info objects). The first message of the newly connected client
             * to the server is client's name. If the name is legal
             * (see: {@link Chat.ServerFrame.Server#isLegalName(java.lang.String)})
             * it adds the ClientThread which represents the current client to
             * an ArrayList which contains all the connected clients.
             * then notifies to server log and all other clients that a new 
             * user connected (and it's name). Similarly every time a client has
             * there is a message in the server log and to all other clients.
             * These last messages distinguish between a client which disconnected
             * abruptly (Haven't closed its socket and not the input and output streams)
             * and between a client that have disconnected properly.
             */
            @Override
            public void run() {
                try {
                    //Socket output to the client - for sending data through the socket to the client
                    out = new PrintWriter(curClient.getOutputStream(), true);
                    //Socket input from cleint - for reading clent's data
                    in = new BufferedReader(new InputStreamReader(curClient.getInputStream()));
                    //Start listening to messages from the client

                    //First meesage is only the name of the client
                    String name = in.readLine();
                    if (isLegalName(name)) {
                        txtLog.append("Client " + name + " connected.\n");
                        sendMessageAllClient("<Client " + name + " has entered>");
                        out.println("Welcome, " + name);
                        //Add to the list of all connected clients
                        connectedClients.add(this);

                        //Name must be set now because if now button was clicked after connection
                        //the thread will be stuck at the while loop below with
                        //the client having no name. This will lead to an error
                        //in the case other client wants to send a message to this
                        //client and this client would have null pointer instead
                        //of a string representing his name
                        info.name = name;

                        //Send or 'who's online' was clicked so now there is data in the InputStream
                        String serializedFromClient;
                        while ((serializedFromClient = in.readLine()) != null) {
                            try {
                                System.out.println(serializedFromClient);
                                info = (ClientInfoSeirialized) SerializeDeserialize.fromString(serializedFromClient);
                                //who's online was clicked
                                if (info.showOnline) {
                                    out.println(getConnectedClients());
                                } 
                                //The user is sending a message to all the clients
                                else if (info.recipient.equals("all")) {
                                    sendMessageAllClient(info.name + ": " + info.msg);
                                } //The user wants to send a private message
                                else {
                                    //Failed sending the private message
                                    if (!sendPrivateMsg(info.name, info.recipient, info.msg)) {
                                        out.println("<Couldn't send your message to " + info.recipient + ">");
                                    } else { //Succeded sending the private message
                                        out.println("<Sent: " + info.msg + " Only to: " + info.recipient + ">");
                                    }
                                }
                            } catch (ClassNotFoundException e) {
                                System.out.println("Error in deserialization" + e.toString());
                            }
                        }
                        txtLog.append("Client " + info.name + " disconnected\n");
                        sendMessageAllClient("<Client " + info.name + " disconnected>");
                    } else {
                        out.println("<Connection rejected because your name is 'all' or your name is already taken>");
                    }
                } //Unexpectedly lost connection with the client
                catch (IOException e) {
                    if (btnStart.getText().equals("Stop")) {
                        txtLog.append("Lost connection with " + info.name + ".\n\tError: + " + e.toString() + "\n");
                        sendMessageAllClient("<Client " + info.name + " has been disconnected>");
                    }
                } finally {
                    synchronized (connectedClients) {
                        connectedClients.remove(this);
                    }
                    closeConnection();
                }
            }

            /**
             * Returning a string which describes the names of the connected clients. 
             * @return Returns a string starting with <b><Now online:</b> and 
             * then the clients' names separated by comma and adds <b>></b> at the end
             */
            private String getConnectedClients() {
                synchronized (connectedClients) {
                    String allConnected = "";
                    allConnected = "<Now online:";
                    for (ClientThread current : connectedClients) {
                        allConnected += current.info.name + ", ";
                    }
                    return allConnected.substring(0, allConnected.length() - 2) + ">";
                }
            }

            /**
             * Closes completely the connection with a client corresponding with
             * this class. Closes the the output stream, input stream and the
             * socket. Be aware the the the class also is removed from the
             * ArrayList in the finally block in the 'run' method of this class.
             */
            public void closeConnection() {
                try {
                    if (out != null) {
                        out.close();
                    }
                    if (in != null) {
                        in.close();
                    }
                    if (curClient != null) {
                        curClient.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
}
