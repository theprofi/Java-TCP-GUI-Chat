/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

/**
 * The GUI class of the client window which also contains all the method that
 * required for communication with the server (Except the serialization method
 * which is in SerializeDeserialize class.
 *
 * @author Eli Eliyahu 312328016 Noam Gruber 312325384
 */
public class ClientFrame extends javax.swing.JFrame {

    final int SERVER_PORT = 18524;  //Which port the server listening to.
    //Make sure same port if specified in the ServerFrame file
    Socket socket = null;           // Socket object for the current client
    PrintWriter out = null;         // Socket output to server - for sending data through the socket to the server
    BufferedReader in = null;       // Socket input from server - for reading server's data
    ClientInfoSeirialized info;     //All the info the client send to the server will be here

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConnect = new javax.swing.JButton();
        lblMyName = new javax.swing.JLabel();
        txtMyName = new javax.swing.JTextField();
        lblServerAddr = new javax.swing.JLabel();
        txtServerAddr = new javax.swing.JTextField();
        btnWhoOnline = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        txtSendTo = new javax.swing.JTextField();
        txtMyMSG = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lblMyName.setText("My name");

        lblServerAddr.setText("Server address");

        txtServerAddr.setText("127.0.0.1");

        btnWhoOnline.setText("Who's online?");
        btnWhoOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhoOnlineActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        txtSendTo.setText("all");

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel3.setText("Send to");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMyName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMyName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblServerAddr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtServerAddr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWhoOnline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSendTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMyMSG, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSend)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(lblMyName)
                    .addComponent(txtMyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblServerAddr)
                    .addComponent(txtServerAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWhoOnline)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSendTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMyMSG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend)
                    .addComponent(jLabel3))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Connect button pressed. This method calls conDisconOfServer method which
     * is in charge of closing and starting a connection with the server.
     *
     * @param evt Is not used
     */
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        conDisconOfServer();
    }//GEN-LAST:event_btnConnectActionPerformed

    /**
     * Send button pressed. This method calls sendMsg method which is in charge
     * of sending data to the server through the socket.
     *
     * @param evt Is not used
     */
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        sendMsg();
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * Clear button pressed. Calls the method clearChat who is in charge of
     * clearing completely the text box where is all the information about the
     * chat.
     *
     * @param evt Is not used
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearChat();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * Who is Online button pressed. Calls the method showOnlineClients who is
     * in charge of retrieving the list with names of all the connected clients.
     *
     * @param evt Is not used
     */
    private void btnWhoOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhoOnlineActionPerformed
        showOnlineClients();
    }//GEN-LAST:event_btnWhoOnlineActionPerformed

    /**
     * Clears completely the text box where is all the information about the
     * chat.
     */
    private void clearChat() {
        txtChat.setText("");
    }

    /**
     * If the client is connected to the server this method defines the fields
     * of info instance of class ClientInfoSerialized with the corresponding
     * data from the GUI components and then sends this instance in its
     * serialized form to the server. If some problem was sending the data the
     * client will be notified in the chat box.
     */
    private void sendMsg() {
        new Thread() {
            @Override
            public void run() {
                try {
                    if (btnConnect.getText().equals("Connect")) {
                        throw new Exception();
                    }
                    info.msg = txtMyMSG.getText();
                    info.recipient = txtSendTo.getText();
                    String serializedInfo = SerializeDeserialize.toString(info);
                    out.println(serializedInfo);
                    txtMyMSG.setText("");
                } catch (Exception e) {
                    txtChat.append("<Problem sending the message>\n");
                }
                //The thread dies
            }
        }.start();
    }

    /**
     * If the client is connected to the server this method defines the boolean
     * field showOnline to be true of instance info of class
     * ClientInfoSerialized. Then sends this instance in its serialized form to
     * the server. When the server sees that the field showOnline is set to true
     * it send the list of connected clients names and ignores other fields in
     * this instance of ClientInfoSerialized. If some problem was sending the
     * data the client will be notified in the chat box.
     */
    private void showOnlineClients() {
        new Thread() {
            @Override
            public void run() {
                try {
                    if (btnConnect.getText().equals("Connect")) {
                        throw new Exception();
                    }
                    info.showOnline = true;
                    String serializedInfo = SerializeDeserialize.toString(info);
                    out.println(serializedInfo);
                    info.showOnline = false;
                } //Error in the serialization procces occured 
                catch (Exception e) {
                    txtChat.append("<Problem getting online clients list>\n");
                }
                //The thread dies
            }
        }.start();
    }

    /**
     * This method handles the connection or a disconnection from the server.
     * If the client is already connected to the server then the btnConnect
     * test will be set to Connect and the connection socket, input and output
     * streams will be closed.
     * If the client is not connected to the server this method will try to
     * make a connection by a socket to the server to his known port and initialize
     * the streams. Then in initializes the info object of the class ClientInfoSeirialized
     * after that it sets only the name filed of this instance to the name the 
     * user chose and sends this instance as a serialized to a string to the
     * server then if the name is legal according to the server the server 
     * will start listening constantly to the socket of this client.
     * If the name is illegal the server will write to the chat area of this
     * client that the name it chose is illegal and terminate the connection.
     */
    private void conDisconOfServer() {
        if (btnConnect.getText().equals("Disconnect")) {
            btnConnect.setText("Connect");
            clostSockInOut();
        } else {
            new Thread() {
                @Override
                public void run() {
                    try {
                        //Try establishing the socket connection between the client and the server
                        socket = new Socket(txtServerAddr.getText(), SERVER_PORT);
                        //Send to the server   //open a PrintWriter on the socket
                        out = new PrintWriter(socket.getOutputStream(), true);
                        //Receive from the server  //open a BufferedReader on the socket
                        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        //Connection is established

                        //Initialize the 'info' object and set only the name
                        info = new ClientInfoSeirialized();
                        if ((txtMyName.getText().equals(""))) {
                            info.name = "default name";
                            txtMyName.setText("default name");
                        } else {
                            info.name = txtMyName.getText();
                        }

                        //First message to the server is the client's name
                        out.println(info.name);

                        btnConnect.setText("Disconnect");
                        //Listen to data passed through the socket from the server
                        try {
                            String line;
                            while ((line = in.readLine()) != null) {
                                txtChat.append(line + "\n");
                            }
                        } catch (IOException e) {
                            System.out.println(".run()");
                            //The user didn't intend disconnecting so the button text is set to 'Disconnect'
                            if (btnConnect.getText().equals("Disconnect")) {
                                txtChat.append("<Server disconnected>\n");
                            } else {//The user clicked disconnect button so the button text was set to 'Connect'
                                txtChat.append("<You disconnected from the server>\n");
                            }
                        }
                        //Couldn't establish a connection with the server
                    } catch (IOException e) {
                        txtChat.append("<Couldn't establish a connection with the server>\n");

                    } finally {
                        btnConnect.setText("Connect");
                        clostSockInOut();
                    }
                }
            }.start();
        }
    }

    /**
     * Terminates the connection with the server.
     * Closes input stream, output stream and the socket that is used to 
     * communicate with the server.
     */
    private void clostSockInOut() {
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException ex) {
            }
        }
        if (in != null) {
            try {
                in.close();
            } catch (IOException ex) {
            }
        }
        if (out != null) {
            out.close();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnWhoOnline;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMyName;
    private javax.swing.JLabel lblServerAddr;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextField txtMyMSG;
    private javax.swing.JTextField txtMyName;
    private javax.swing.JTextField txtSendTo;
    private javax.swing.JTextField txtServerAddr;
    // End of variables declaration//GEN-END:variables

}
